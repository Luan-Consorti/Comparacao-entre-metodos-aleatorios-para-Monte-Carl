# -*- coding: utf-8 -*-
"""EP3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uppgBYVem-675jaIwrbfJXkjazsO3aoC
"""

import random
import math
import pandas as pd
import numpy as np
import scipy.stats as sp
import scipy
import time
import statistics
import matplotlib.pyplot as plt
from scipy.integrate import quad
from scipy.stats import beta
from scipy.stats import weibull_min, gamma, beta, qmc

#funcao a ser integrada
def f(x):
    return np.exp(-0.528505531*x)*np.cos(0.46718000809*x)

#funcao controle
def phi(x):
    return -0.5*x + 1

#metodo crude
def crude(f, qnt_amostras):
    soma_tquasi = 0
    soma_tpseud = 0

    for i in range(10):
        #calculo para amostragem quasi
        t0_quasi = time.time()
        crude_amostra = qmc.Halton(d=1, scramble=False)
        amostra_quasi = crude_amostra.random(n=qnt_amostras)
        integral_quasi = np.sum(f(amostra_quasi)) / qnt_amostras
        t1_quasi = time.time()
        soma_tquasi += (t1_quasi - t0_quasi)
        var_quasi = np.sum((f(amostra_quasi) - integral_quasi)**2) / qnt_amostras

        #calculo para amostragem pseudo
        t0_pseud = time.time()
        x = np.random.uniform(0, 1, qnt_amostras)
        integral_pseud = np.sum(f(x)) / qnt_amostras
        t1_pseud = time.time()
        soma_tpseud += (t1_pseud - t0_pseud)
        var_pseud = np.sum((f(x) - integral_pseud)**2) / qnt_amostras

    tmedio_quasi = soma_tquasi / 10
    tmedio_pseud = soma_tpseud / 10

    return [[round(integral_quasi,6),round(var_quasi,6),round(tmedio_quasi,6)],[round(integral_pseud,6),round(var_pseud,6),round(tmedio_pseud,6)]]

#metodo hit or miss
def hitmiss(f,qnt_amostras):
    soma_tquasi = 0
    soma_tpseud = 0

    for i in range(10):

        #calculo para amostragem quasi
        t0_quasi = time.time()
        hm_amostra_quasi= qmc.Halton(d=2, scramble=False)
        amostra_quasi = hm_amostra_quasi.random(n=qnt_amostras)
        S = 1  # área do retângulo
        hit_quasi = 0
        for i in range(qnt_amostras):
            x = amostra_quasi[i][0]
            y = amostra_quasi[i][1]
            if f(x) >= y:
                hit_quasi += 1
        integral_quasi = S * hit_quasi / qnt_amostras
        t1_quasi = time.time()

        soma_tquasi += (t1_quasi-t0_quasi)
        var_quasi = (integral_quasi)*(1-integral_quasi)

        #calculo para amostragem pseudo
        t0_pseud = time.time()
        S = 1
        hit_pseud = 0
        for j in range(qnt_amostras):
            x = random.uniform(0,1)
            y = random.uniform(0,1)
            if f(x) >= y:
                hit_pseud += 1
        integral_pseud = S * hit_pseud / qnt_amostras
        t1_pseud = time.time()
        soma_tpseud += (t1_pseud - t0_pseud)
        var_pseud = (integral_pseud)*(1-integral_pseud)

    tmedio_quasi = soma_tquasi / 10
    tmedio_pseud = soma_tpseud / 10

    return [[round(integral_quasi,6),round(var_quasi,6),round(tmedio_quasi,6)],[round(integral_pseud,6),round(var_pseud,6),round(tmedio_pseud,6)]]

def im_samp(f,num_amostras):
    soma_tquasi = 0
    soma_tpseud = 0

    for i in range(10):

        #calculo para amostragem quasi
        t0_quasi = time.time()
        k, theta = 1, 1.095 # parametros da distribuição
        g = sp.beta(k, theta)
        sampler_x = qmc.Halton(d=1, scramble=False)
        amostra_quasi = sampler_x.random(n=num_amostras)
        integral_quasi = np.sum(f(amostra_quasi)/g.pdf(amostra_quasi))/num_amostras
        t1_quasi = time.time()
        soma_tquasi += (t1_quasi - t0_quasi)

        #calculo para amostragem pseudo
        t0_pseud = time.time()
        k, theta = 1, 1.095
        g = sp.beta(k, theta)
        amostra_pseud = g.rvs(num_amostras)
        integral_pseud = np.sum(f(amostra_pseud)/ g.pdf(amostra_pseud))/num_amostras
        t1_pseud = time.time()
        soma_tpseud += (t1_pseud - t0_pseud)

    var_quasi = np.sum(g.pdf(amostra_quasi)*(f(amostra_quasi)/g.pdf(amostra_quasi) - integral_quasi)**2)/num_amostras
    var_pseud = np.sum(g.pdf(amostra_pseud)*(f(amostra_pseud)/g.pdf(amostra_pseud) - integral_pseud)**2)/num_amostras
    tmedio_quasi = soma_tquasi / 10
    tmedio_pseud = soma_tpseud / 10

    return [[round(integral_quasi,6),round(var_quasi,6),round(tmedio_quasi,6)],[round(integral_pseud,6),round(var_pseud,6),round(tmedio_pseud,6)]]

def variaveis_controle(f, g, num_amostras):
    soma_tquasi = 0
    soma_tpseud = 0

    for i in range(10):

        #calculo para amostragem quasi
        t0_quasi = time.time()
        integral_c = 0.75 # valor da integral da minha função de controle (1-0.5x)
        soma = 0
        fx_quasi,gx_quasi = [],[]
        amostra_quasi = qmc.Halton(d=2, scramble=False)

        for i in range(num_amostras):
            val_x = amostra_quasi.random(n=1)[0]
            fx_quasi.append(f(val_x))
            gx_quasi.append(g(val_x))
            soma += fx_quasi[i] - gx_quasi[i] + integral_c
        integral_quasi = np.mean(soma)/num_amostras
        t1_quasi = time.time()
        soma_tquasi += (t1_quasi - t0_quasi)
        var_estimador_quasi = abs(np.var(fx_quasi) - 2 * np.cov(fx_quasi, gx_quasi)[0][1] + np.var(gx_quasi))

        #calculo para amostragem pseudo
        t0_pseud = time.time()
        integral_c = 0.75 # valor da integral da minha função de controle (1-0.5x)
        amostra_pseud = np.random.uniform(0, 1, num_amostras)
        soma = 0
        fx_pseud,gx_pseud = [],[]

        for i in range(num_amostras):
            fx_pseud.append(f(amostra_pseud[i]))
            gx_pseud.append(g(amostra_pseud[i]))
            soma += f(amostra_pseud[i]) - g(amostra_pseud[i]) + integral_c
        integral_pseud = soma/num_amostras
        t1_pseud = time.time()
        soma_tpseud += (t1_pseud - t0_pseud)
        var_estimador_pseud = abs(np.var(fx_pseud) - 2 * np.cov(fx_pseud, gx_pseud)[0][1] + np.var(gx_pseud))

    tmedio_quasi = soma_tquasi / 10
    tmedio_pseud = soma_tpseud / 10

    return [[round(integral_quasi,6),round(var_estimador_quasi,6),round(tmedio_quasi,6)],[round(integral_pseud,6),round(var_estimador_pseud,6),round(tmedio_pseud,6)]]

def gera_graficos(num_amostras):
  amostras = np.arange(10, num_amostras + 1, 10)
  crude_pseudo,crude_quasi = [],[]
  hitmiss_pseudo,hitmiss_quasi = [],[]
  im_samp_pseudo,im_samp_quasi = [],[]
  variaveis_controle_pseudo,variaveis_controle_quasi = [],[]

  #Loop para crude
  for N in amostras:
      crude_pseudo.append(crude(f,N)[1][0])
      crude_quasi.append(crude(f,N)[0][0])
      im_samp_pseudo.append(im_samp(f,N)[1][0])
      im_samp_quasi.append(im_samp(f,N)[0][0])
      if N <= 1000:
        hitmiss_pseudo.append(hitmiss(f,N)[1][0])
        hitmiss_quasi.append(hitmiss(f,N)[0][0])
        variaveis_controle_pseudo.append( variaveis_controle(f,phi,N)[1][0])
        variaveis_controle_quasi.append( variaveis_controle(f,phi,N)[0][0])



  plt.figure(figsize=(10,5))
  plt.plot(amostras, crude_pseudo, label="Pseudo-aleatório",linewidth=2)
  plt.plot(amostras, crude_quasi, label="Quasi-aleatório (Halton)",linewidth=2)
  plt.title("Comparação de Métodos Aleatórios (Crude)", fontsize=16, fontweight='bold')
  plt.xlabel("Número de Amostras", fontsize=12)
  plt.ylabel("Área Estimada", fontsize=12)
  plt.legend(fontsize=10)
  plt.xticks(fontsize=10)
  plt.yticks(fontsize=10)
  plt.show()

  print('\n')
  plt.figure(figsize=(10,5))
  plt.plot(amostras[1:101], hitmiss_pseudo, label="Pseudo-aleatório",linewidth=2)
  plt.plot(amostras[1:101], hitmiss_quasi, label="Quasi-aleatório (Halton)",linewidth=2)
  plt.title("Comparação de Métodos Aleatórios (Hit or Miss)", fontsize=16, fontweight='bold')
  plt.xlabel("Número de Amostras", fontsize=12)
  plt.ylabel("Área Estimada", fontsize=12)
  plt.legend(fontsize=10)
  plt.xticks(fontsize=10)
  plt.yticks(fontsize=10)
  plt.show()

  print('\n')
  plt.figure(figsize=(10,5))
  plt.plot(amostras, im_samp_pseudo, label="Pseudo-aleatório",linewidth=2)
  plt.plot(amostras, im_samp_quasi, label="Quasi-aleatório (Halton)",linewidth=2)
  plt.title("Comparação de Métodos Aleatórios (Importance Sampling)", fontsize=16, fontweight='bold')
  plt.xlabel("Número de Amostras", fontsize=12)
  plt.ylabel("Área Estimada", fontsize=12)
  plt.legend(fontsize=10)
  plt.xticks(fontsize=10)
  plt.yticks(fontsize=10)
  plt.show()

  print('\n')
  plt.figure(figsize=(10,5))
  plt.plot(amostras[1:101], variaveis_controle_pseudo, label="Pseudo-aleatório",linewidth=2)
  plt.plot(amostras[1:101], variaveis_controle_quasi, label="Quasi-aleatório (Halton)",linewidth=2)
  plt.title("Comparação de Métodos Aleatórios (Variáveis de Controle)", fontsize=16, fontweight='bold')
  plt.xlabel("Número de Amostras", fontsize=12)
  plt.ylabel("Área Estimada", fontsize=12)
  plt.legend(fontsize=10)
  plt.xticks(fontsize=10)
  plt.yticks(fontsize=10)
  plt.show()

def Main():
  amostra = 10000
  conjunto = {  '':['Valor da Integral (Quasi)','Variância (Quasi)','Tempo médio (Quasi)','Valor da Integral (Pseudo)','Variância (Pseudo)','Tempo médio (Pseudo)'],
                  'Crude':[valor for sublista in crude(f, amostra) for valor in sublista],
                  'Hit or Miss':[valor for sublista in hitmiss(f,amostra) for valor in sublista],
                  'Importance Sampling':[valor for sublista in im_samp(f, amostra) for valor in sublista],
                  'Variáveis de Controle':[valor for sublista in variaveis_controle(f, phi, amostra) for valor in sublista]}

  df = pd.DataFrame(conjunto)
  print(df)
  print('\n')
  gera_graficos(amostra)

np.random.seed(13)
random.seed(13)
Main()